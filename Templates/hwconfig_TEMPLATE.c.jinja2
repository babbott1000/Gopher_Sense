// Autogenerated by SensorCannon
#include "dam_hw_config.h" // TODO fix this in auto gen to be general
#include "gopher_sense.h"
#include "GopherCAN.h"


{% set l = module.adc1_params|length%}
{% if l > 0 %}
// BEGIN ADC1 PARAMS

// give memory to the buffers
{% for param in module.adc1_params %}
{% set i = loop.index %}
#define ADC1_PARAM{{i}}_BUF_SIZE {{param.buffer_size}}
U32 adc1_param{{i}}_buffer_mem[ADC1_PARAM{{i}}_BUF_SIZE];
{% endfor %}
// Fill out the array with all of the sensor params
ANALOG_SENSOR_PARAM adc1_sensor_params[NUM_ADC1_PARAMS] = 
{
  {% for param in module.adc1_params %}
  {% set i = loop.index %}
  // adc1_param{{i}}
  {
    .analog_param =
    {
      .can_param = &{{param.param_name}},
      .status = CLEAN,
    },
    .analog_sensor = &{{module.getSensorName(param.producer)}},
    .num_filtered_subparams = 0, // not yet implemented
    .filtered_subparams = NULL, // not yet implemented
    .buffer =
    {
      .buffer = adc1_param{{i}}_buffer_mem,
      .buffer_size = ADC1_PARAM{{i}}_BUF_SIZE,
      .fill_level = 0
    }
  },
  #undef ADC1_PARAM{{i}}_BUF_SIZE
  {% endfor %}
};
{% else %}
// No parameters on ADC1
{% endif %}
// ***************************************************************************

{% set l = module.adc2_params|length%}
{% if l > 0 %}
// BEGIN ADC2 PARAMS

// give memory to the buffers
{% for param in module.adc2_params %}
{% set i = loop.index %}
#define ADC2_PARAM{{i}}_BUF_SIZE {{param.buffer_size}}
U32 adc2_param{{i}}_buffer_mem[ADC2_PARAM{{i}}_BUF_SIZE];
{% endfor %}
// Fill out the array with all of the sensor params
ANALOG_SENSOR_PARAM adc2_sensor_params[NUM_ADC2_PARAMS] = 
{
  {% for param in module.adc2_params %}
  {% set i = loop.index %}
  // adc2_param{{i}}
  {
    .analog_param =
    {
      .can_param = &{{param.param_name}},
      .status = CLEAN,
    },
    .analog_sensor = &{{module.getSensorName(param.producer)}},
    .num_filtered_subparams = 0, // not yet implemented
    .filtered_subparams = NULL, // not yet implemented
    .buffer =
    {
      .buffer = adc2_param{{i}}_buffer_mem,
      .buffer_size = ADC2_PARAM{{i}}_BUF_SIZE,
      .fill_level = 0
    }
  },
  #undef ADC2_PARAM{{i}}_BUF_SIZE
  {% endfor %}
};
{% else %}
// No parameters on ADC2
{% endif %}
// ***************************************************************************

{% set l = module.adc3_params|length%}
{% if l > 0 %}
// BEGIN ADC3 PARAMS

// give memory to the buffers
{% for param in module.adc3_params %}
{% set i = loop.index %}
#define ADC3_PARAM{{i}}_BUF_SIZE {{param.buffer_size}}
U32 adc3_param{{i}}_buffer_mem[ADC3_PARAM{{i}}_BUF_SIZE];
{% endfor %}
// Fill out the array with all of the sensor params
ANALOG_SENSOR_PARAM adc3_sensor_params[NUM_ADC3_PARAMS] = 
{
  {% for param in module.adc3_params %}
  {% set i = loop.index %}
  // adc3_param{{i}}
  {
    .analog_param =
    {
      .can_param = &{{param.param_name}},
      .status = CLEAN,
    },
    .analog_sensor = &{{module.getSensorName(param.producer)}},
    .num_filtered_subparams = 0, // not yet implemented
    .filtered_subparams = NULL, // not yet implemented
    .buffer =
    {
      .buffer = adc3_param{{i}}_buffer_mem,
      .buffer_size = ADC3_PARAM{{i}}_BUF_SIZE,
      .fill_level = 0
    }
  },
  #undef ADC3_PARAM{{i}}_BUF_SIZE
  {% endfor %}
};
{% else %}
// No parameters on ADC3
{% endif %}
// ***************************************************************************

{% set l = module.can_params|length%}
{% if l > 0%}
// BEGIN CAN PARAMS
// give memory to the buffers
{% for param in module.can_params %}
{% set i = loop.index %}
#define CAN_PARAM{{i}}_BUF_SIZE {{param.buffer_size}}
U32 can_param{{i}}_buffer_mem[CAN_PARAM{{i}}_BUF_SIZE];
{% endfor %}
// Fill out the array with all of the sensor params
CAN_SENSOR_PARAM can_sensor_params[NUM_CAN_SENSOR_PARAMS] =
{
  {% for param in module.can_params %}
  {% set i = loop.index %}
  {% set name = module.getSensorName(param.producer) %}
  // can_param{{i}}
  {

    .can_param =
    {
      .can_param = &{{param.param_name}},
      .status = CLEAN,
    },
    .can_sensor = &{{name}},
    .message_idx = {{module.getDependencyMessageIndex(name, param.dependency)}},
    .num_filtered_subparams = 0, // not yet implemented
    .filtered_subparams = NULL, // not yet implemented
    .buffer =
    {
      .buffer = can_param{{i}}_buffer_mem,
      .buffer_size = CAN_PARAM{{i}}_BUF_SIZE,
      .fill_level = 0
    }

  },
  #undef CAN_PARAM{{i}}_BUF_SIZE
  {% endfor %}
};
{% else %}
// No CAN params
{% endif %}
// ***************************************************************************

// BUCKETS
{% if buckets|length > 0 -%}

// setup the param lists for each bucket
{% for bucket in buckets %}
GENERAL_PARAMETER {{bucket.name}}_bucket_general_param_list[{{bucket.params|length}}] =
{
  {% for param in bucket.params -%}
  {
    .can_param = &{{param}},
    .status = CLEAN
  },
  {% endfor %}
};
{% endfor %}

// initalize the bucket structs
BUCKET bucket_list[NUM_BUCKETS] =
{
  {% for bucket in buckets %}
  // Define bucket {{bucket.name}}
  {
    .bucket_id = {{bucket.id}},
    .frequency = {{bucket.frequency}},
    .state = BUCKET_INIT,
    .param_list = 
    {
      .len = {{bucket.params|length}},
      .list = {{bucket.name}}_bucket_general_param_list
    }
  },
  {% endfor %}
};
{% else %}
// No buckets configured
{% endif %}

//END autogenerted file
