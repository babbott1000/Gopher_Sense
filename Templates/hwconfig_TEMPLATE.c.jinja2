// Autogenerated by SensorCannon
#include "dam_hw_config.h" // TODO fix this in auto gen to be general
#include "gopher_sense.h"
#include "GopherCAN.h"


{% for param in module.adc1_params %}
{% set i = loop.index %}
// adc1_param{{i}}
ANALOG_SENSOR_PARAM adc1_param{{i}};
GENERAL_PARAMETER adc1_param{{i}}_genparam;
{% set l = param.filtered_params|length %}
{% if l > 0 %}
{% for fparam in param.filtered_params -%}
FILTERED_PARAM adc1_param{{i}}_filtered_{{loop.index}};
{% endfor %}
FILTERED_PARAM adc1_param{{i}}_fparam_list[{{l}}];
{% else %}
{% endif %}

U16_BUFFER adc1_param{{i}}_u16buffer;
U16 adc1_param{{i}}_buffer[{{param.buffer_size}}];
{% endfor %}
{% set l = module.adc1_params|length%}
{% if l > 0 %}
ANALOG_SENSOR_PARAM adc1_sensor_params[NUM_ADC1_PARAMS];
{% else %}
ANALOG_SENSOR_PARAM adc1_sensor_params[NUM_ADC1_PARAMS];
{% endif %}




//ADC1
void init_adc1_params (void) {
    {% for param in module.adc1_params %}
    {% set i = loop.index %}
    // adc1_param{{i}}
    adc1_param{{i}}_genparam.param.float_struct = {{param.param_name}};
    adc1_param{{i}}.analog_sensor = {{module.getSensorName(param.producer)}};
    {% set l = param.filtered_params|length %}
    adc1_param{{i}}.num_filtered_subparams = {{l}};

    {% if l > 0 %}
    {% for fparam in param.filtered_params -%}
    adc1_param{{i}}_filtered_{{loop.index}}.filtered_param.param.float_struct = {{fparam.param_name}};
    adc1_param{{i}}_filtered_{{loop.index}}.filter_type = {{fparam.filter[0]}};
    adc1_param{{i}}_filtered_{{loop.index}}.filter_value = {{fparam.filter[1]}};
    {% endfor %}
    {% for n in range(l) %}
    adc1_param{{i}}_fparam_list[{{n}}] = adc1_param{{i}}_filtered_{{n+1}};
    {% endfor %}
    adc1_param{{i}}.filtered_subparams = adc1_param{{i}}_fparam_list;

    {% else %}
    adc1_param{{i}}.filtered_subparams = NULL;
    {% endif %}

    adc1_param{{i}}_u16buffer.buffer = adc1_param{{i}}_buffer;
    adc1_param{{i}}_u16buffer.buffer_size = {{param.buffer_size}};
    adc1_param{{i}}_u16buffer.fill_level = 0;
    adc1_param{{i}}.buffer = adc1_param{{i}}_u16buffer;
    {% endfor %}
    {% set l = module.adc1_params|length%}
    {% for n in range(l) %}
    adc1_sensor_params[{{loop.index - 1}}] = adc1_param{{n+1}};
    {% endfor%}

}
// ***************************************************************************
{% for param in module.adc2_params %}
{% set i = loop.index %}
// adc2_param{{i}}
ANALOG_SENSOR_PARAM adc2_param{{i}};
GENERAL_PARAMETER adc2_param{{i}}_genparam;
{% set l = param.filtered_params|length %}
{% if l > 0 %}
{% for fparam in param.filtered_params -%}
FILTERED_PARAM adc2_param{{i}}_filtered_{{loop.index}};
{% endfor %}
FILTERED_PARAM adc2_param{{i}}_fparam_list[{{l}}];
{% else %}
{% endif %}

U16_BUFFER adc2_param{{i}}_u16buffer;
U16 adc2_param{{i}}_buffer[{{param.buffer_size}}];
{% endfor %}
{% set l = module.adc2_params|length%}
{% if l > 0 %}
ANALOG_SENSOR_PARAM adc2_sensor_params[NUM_ADC2_PARAMS];
{% else %}
ANALOG_SENSOR_PARAM adc2_sensor_params[NUM_ADC2_PARAMS];
{% endif %}




//ADC2
void init_adc2_params (void) {
    {% for param in module.adc2_params %}
    {% set i = loop.index %}
    // adc2_param{{i}}
    adc2_param{{i}}_genparam.param.float_struct = {{param.param_name}};
    adc2_param{{i}}.analog_sensor = {{module.getSensorName(param.producer)}};
    {% set l = param.filtered_params|length %}
    adc2_param{{i}}.num_filtered_subparams = {{l}};

    {% if l > 0 %}
    {% for fparam in param.filtered_params -%}
    adc2_param{{i}}_filtered_{{loop.index}}.filtered_param.param.float_struct = {{fparam.param_name}};
    adc2_param{{i}}_filtered_{{loop.index}}.filter_type = {{fparam.filter[0]}};
    adc2_param{{i}}_filtered_{{loop.index}}.filter_value = {{fparam.filter[1]}};
    {% endfor %}
    {% for n in range(l) %}
    adc2_param{{i}}_fparam_list[{{n}}] = adc2_param{{i}}_filtered_{{n+1}};
    {% endfor %}
    adc2_param{{i}}.filtered_subparams = adc2_param{{i}}_fparam_list;

    {% else %}
    adc2_param{{i}}.filtered_subparams = NULL;
    {% endif %}

    adc2_param{{i}}_u16buffer.buffer = adc2_param{{i}}_buffer;
    adc2_param{{i}}_u16buffer.buffer_size = {{param.buffer_size}};
    adc2_param{{i}}_u16buffer.fill_level = 0;
    adc2_param{{i}}.buffer = adc2_param{{i}}_u16buffer;
    {% endfor %}
    {% set l = module.adc2_params|length%}
    {% for n in range(l) %}
    adc2_sensor_params[{{loop.index - 1}}] = adc2_param{{n+1}};
    {% endfor%}

}
// ******************************************************************
{% for param in module.adc3_params %}
{% set i = loop.index %}
// adc3_param{{i}}
ANALOG_SENSOR_PARAM adc3_param{{i}};
GENERAL_PARAMETER adc3_param{{i}}_genparam;
{% set l = param.filtered_params|length %}
{% if l > 0 %}
{% for fparam in param.filtered_params -%}
FILTERED_PARAM adc3_param{{i}}_filtered_{{loop.index}};
{% endfor %}
FILTERED_PARAM adc3_param{{i}}_fparam_list[{{l}}];
{% else %}
{% endif %}

U16_BUFFER adc3_param{{i}}_u16buffer;
U16 adc3_param{{i}}_buffer[{{param.buffer_size}}];
{% endfor %}
{% set l = module.adc3_params|length%}
{% if l > 0 %}
ANALOG_SENSOR_PARAM adc3_sensor_params[NUM_ADC3_PARAMS];
{% else %}
ANALOG_SENSOR_PARAM adc3_sensor_params[NUM_ADC3_PARAMS];
{% endif %}




//ADC3
void init_adc3_params (void) {
    {% for param in module.adc3_params %}
    {% set i = loop.index %}
    // adc3_param{{i}}
    adc3_param{{i}}_genparam.param.float_struct = {{param.param_name}};
    adc3_param{{i}}.analog_sensor = {{module.getSensorName(param.producer)}};
    {% set l = param.filtered_params|length %}
    adc3_param{{i}}.num_filtered_subparams = {{l}};

    {% if l > 0 %}
    {% for fparam in param.filtered_params -%}
    adc3_param{{i}}_filtered_{{loop.index}}.filtered_param.param.float_struct = {{fparam.param_name}};
    adc3_param{{i}}_filtered_{{loop.index}}.filter_type = {{fparam.filter[0]}};
    adc3_param{{i}}_filtered_{{loop.index}}.filter_value = {{fparam.filter[1]}};
    {% endfor %}
    {% for n in range(l) %}
    adc3_param{{i}}_fparam_list[{{n}}] = adc3_param{{i}}_filtered_{{n+1}};
    {% endfor %}
    adc3_param{{i}}.filtered_subparams = adc3_param{{i}}_fparam_list;

    {% else %}
    adc3_param{{i}}.filtered_subparams = NULL;
    {% endif %}

    adc3_param{{i}}_u16buffer.buffer = adc3_param{{i}}_buffer;
    adc3_param{{i}}_u16buffer.buffer_size = {{param.buffer_size}};
    adc3_param{{i}}_u16buffer.fill_level = 0;
    adc3_param{{i}}.buffer = adc3_param{{i}}_u16buffer;
    {% endfor %}
    {% set l = module.adc3_params|length%}
    {% for n in range(l) %}
    adc3_sensor_params[{{loop.index - 1}}] = adc3_param{{n+1}};
    {% endfor%}

}



//CAN_SENSOR_PARAMS
{% for param in module.can_params %}
{% set i = loop.index %}
// can_param{{i}}
CAN_SENSOR_PARAM can_param{{i}};
{% set name = module.getSensorName(param.producer) %}
{% set l = param.filtered_params|length %}
{% if l > 0%}
{% for fparam in param.filtered_params -%}
FILTERED_PARAM can_param{{i}}_filtered_{{loop.index}};
{% endfor %}
FILTERED_PARAM can_param{{i}}_fparam_list[{{l}}];
{% else %}
{% endif %}

U16_BUFFER can_param{{i}}_u16buffer;
U16 can_param{{i}}_buffer[{{param.buffer_size}}];
{% endfor %}

{% set l = module.can_params|length%}
{% if l > 0%}
CAN_SENSOR_PARAM can_sensor_params[NUM_CAN_SENSOR_PARAMS];
{% else %}
CAN_SENSOR_PARAM can_sensor_params[NUM_CAN_SENSOR_PARAMS];
{% endif %}

void init_can_params (void) {
{% for param in module.can_params %}
{% set i = loop.index %}
// can_param{{i}}
can_param{{i}}.can_param.param.float_struct = {{param.param_name}};
{% set name = module.getSensorName(param.producer) %}
can_param{{i}}.can_sensor = {{name}};
can_param{{i}}.message_idx = {{module.getDependencyMessageIndex(name, param.dependency)}};
{% set l = param.filtered_params|length %}
can_param{{i}}.num_filtered_params = {{l}};

{% if l > 0%}
{% for fparam in param.filtered_params -%}
can_param{{i}}_filtered_{{loop.index}}.filtered_param.param.float_struct = {{fparam.param_name}};
can_param{{i}}_filtered_{{loop.index}}.filter_type = {{fparam.filter[0]}};
can_param{{i}}_filtered_{{loop.index}}.filter_value = {{fparam.filter[1]}};
{% endfor %}
{% for n in range(l) %}
can_param{{i}}_fparam_list[{{n}}] = can_param{{i}}_filtered_{{n+1}};
{% endfor %}

can_param{{i}}.filtered_subparams = can_param{{i}}_fparam_list;
{% else %}
can_param{{i}}.filtered_subparams = NULL;
{% endif %}

can_param{{i}}_u16buffer.buffer = can_param{{i}}_buffer;
can_param{{i}}_u16buffer.buffer_size = {{param.buffer_size}};
can_param{{i}}_u16buffer.fill_level = 0;

can_param{{i}}.buffer = can_param{{i}}_u16buffer;

{% endfor %}

{% set l = module.can_params|length%}
{% if l > 0%}
{% for n in range(l) %}
can_sensor_params[{{n}}] = can_param{{n+1}};
{% endfor%}
{% else %}
CAN_SENSOR_PARAM* can_sensor_params = NULL;
{% endif %}

}


// Buckets if any
{% if buckets|length > 0 -%}
{% for bucket in buckets %}
// Define bucket {{bucket.name}}
BUCKET {{bucket.name}};

PARAM_LIST {{bucket.name}}_bucket_param_list;

GENERAL_PARAMETER {{bucket.name}}_bucket_general_param_list[{{bucket.params|length}}];
{% endfor %}
BUCKET buckets[NUM_BUCKETS];
{% else %}
BUCKET buckets[NUM_BUCKETS];
{% endif %}

// ************************************************
void init_buckets (void) {
{% if buckets|length > 0 -%}
{% for bucket in buckets %}
// Define bucket {{bucket.name}}
{{bucket.name}}.bucket_id = {{bucket.id}};
{{bucket.name}}.frequency = {{bucket.frequency}};
{{bucket.name}}_bucket_param_list.len = {{bucket.params|length}};


{% for param in bucket.params -%}
{{bucket.name}}_bucket_general_param_list[{{loop.index - 1}}].param.float_struct = {{param}};
{% endfor %}

{{bucket.name}}_bucket_param_list.list = {{bucket.name}}_bucket_general_param_list;
{{bucket.name}}.bucket = {{bucket.name}}_bucket_param_list;
{% endfor %}

{% for bucket in buckets -%}
buckets[{{loop.index - 1}}] = {{bucket.name}};
{% endfor %}
{% else %}
{% endif %}
}


//END autogenerted file
