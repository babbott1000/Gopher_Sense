// Generated by SensorCannon

#include "gopher_sense.h"
#include "sensor_hal.h"

#define continuous 1

// ********** ANALOG_SENSORS **********
{% for sensor in analog_sensors %}
// Sensor definition {{sensor.name}}
{% set l = sensor.numTableEntries %}
float {{sensor.name}}_output_model_table_independent_vars[{{l}}] = {
    {% for entry in sensor.tableEntries[0] -%}
    {{entry}}{% if loop.index < l %},{% endif %}
    {% endfor %}
};
float {{sensor.name}}_output_model_table_dependent_vars[{{sensor.numTableEntries}}] = {
    {% for entry in sensor.tableEntries[1] -%}
    {{entry}}{% if loop.index < l %},{% endif %}
    {% endfor %}
};
TABLE {{sensor.name}}_output_model_table = 
{
    .num_entries = {{l}},
    .independent_vars = {{sensor.name}}_output_model_table_independent_vars,
    .dependent_vars = {{sensor.name}}_output_model_table_dependent_vars
};
ANALOG_SENSOR {{sensor.name}} = 
{
    .sensor_id = "{{sensor.sensorID}}",
    .model =
    {
        .input_type = {{sensor.analog['analog_subtype'].upper()}},
        .rin = {{sensor.analog['rin']}},
        .rdown = {{sensor.analog['rdown']}},
        .r3v = {{sensor.analog['r3v']}},
        .r5v = {{sensor.analog['r5v']}},
        .rfilt = {{sensor.analog['rfilt']}},
        .rdiv = {{sensor.analog['rdiv']}},
        .table = &{{sensor.name}}_output_model_table
    },
    {% for o in sensor.outputs -%}
    .output = 
    {
        .output_name = "{{o}}",
        .output_unit = "{{sensor.outputs[o]['unit']}}",
        .scalar = 
        {
            .quantization = {{sensor.outputs[o]['quantization']}}, //1 if continuous
            .offset = {{sensor.outputs[o]['offset']}}
        }
    }
    {% endfor %}
};

{% endfor %}

// ********** CAN SENSORS **********
{% for sensor in can_sensors %}
// Sensor definition for: {{sensor.name}}
{% set l = sensor.numMessages %}
SENSOR_CAN_MESSAGE {{sensor.name}}_messages[{{l}}] =
{
{% for message in sensor.messages -%}
{% set m = sensor.messages[message] %}
{% set output = m['output_measured'] %}
    // Details for message: {{output}}
    {
        .message_id = {{m['id']}},
        .output =
        {
            .output_name = "{{output}}",
			.output_unit = "{{sensor.outputs[output]['unit']}}",
            .scalar =
            {
                .quantization = {{sensor.outputs[output]['quantization']}},
                .offset = {{sensor.outputs[output]['offset']}}
            }
        },
        .data_start = {{m['data_byte_start']}},
        .data_end = {{m['data_byte_end']}},
		.data_enc = {{m['encoding']}}
    },
    {% endfor %}
};

CAN_SENSOR {{sensor.name}} = 
{
    .sensor_id = "{{sensor.sensorID}}",
    {% set l = sensor.numMessages %}
    .num_messages = {{l}},
    .messages = {{sensor.name}}_messages
};

{% endfor %}

#undef continuous

// END autogenerated file
